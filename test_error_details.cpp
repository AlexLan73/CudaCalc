/**
 * @file test_error_details.cpp
 * @brief –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ FFT16
 * 
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–¥–µ –∏–º–µ–Ω–Ω–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç 131% error –∏ –ø–æ—á–µ–º—É —ç—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞.
 */

#include <iostream>
#include <iomanip>
#include <complex>
#include <vector>
#include <cmath>
#include "SignalGenerators/include/sine_generator.h"
#include "ModelsFunction/include/nvidia/fft/fft16_wmma_profiled.h"
#include "Tester/include/validation/fft_validator.h"

using namespace CudaCalc;

int main() {
    std::cout << "=== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö FFT16 ===" << std::endl;
    std::cout << std::endl;
    
    try {
        // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        std::cout << "=== 1. –í–•–û–î–ù–û–ô –°–ò–ì–ù–ê–õ ===" << std::endl;
        SineGenerator gen(4, 1024, 8);
        auto input = gen.generate(16, false);
        
        std::cout << "–†–∞–∑–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞:" << std::endl;
        std::cout << "  Rays:           " << input.config.ray_count << " –ª—É—á–∞" << std::endl;
        std::cout << "  Points per ray: " << input.config.points_per_ray << " —Ç–æ—á–µ–∫" << std::endl;
        std::cout << "  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" << std::endl;
        std::cout << "  TOTAL:          " << input.signal.size() << " –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–µ–ª" << std::endl;
        std::cout << "  –ü–∞–º—è—Ç—å:         " << (input.signal.size() * sizeof(std::complex<float>) / 1024.0) << " KB" << std::endl;
        std::cout << std::endl;
        
        std::cout << "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–∞:" << std::endl;
        std::cout << "  –¢–∏–ø:     –°–∏–Ω—É—Å" << std::endl;
        std::cout << "  –ü–µ—Ä–∏–æ–¥:  8 —Ç–æ—á–µ–∫" << std::endl;
        std::cout << "  –ß–∞—Å—Ç–æ—Ç–∞: " << (1.0 / 8.0) << " (= 2 –≤ —Å–ø–µ–∫—Ç—Ä–µ FFT16)" << std::endl;
        std::cout << std::endl;
        
        std::cout << "–ü–µ—Ä–≤—ã–µ 8 —Ç–æ—á–µ–∫ —Å–∏–≥–Ω–∞–ª–∞:" << std::endl;
        for (int i = 0; i < 8; ++i) {
            auto val = input.signal[i];
            std::cout << "  [" << i << "] " << std::setw(8) << std::fixed << std::setprecision(4) 
                      << val.real() << " + " << std::setw(8) << val.imag() << "i" << std::endl;
        }
        std::cout << std::endl;
        
        // 2. –í—ã–ø–æ–ª–Ω—è–µ–º FFT
        std::cout << "=== 2. FFT –û–ë–†–ê–ë–û–¢–ö–ê ===" << std::endl;
        FFT16_WMMA_Profiled fft;
        fft.initialize();
        
        BasicProfilingResult profiling;
        auto output = fft.process_with_profiling(input, profiling);
        
        std::cout << "FFT Window: " << input.config.window_fft << " —Ç–æ—á–µ–∫" << std::endl;
        std::cout << "–û–∫–æ–Ω:       " << output.num_windows() << std::endl;
        std::cout << std::endl;
        
        std::cout << "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–†–ê–ó–î–ï–õ–¨–ù–û!):" << std::endl;
        std::cout << std::fixed << std::setprecision(3);
        std::cout << "  Upload:   " << profiling.upload_ms << " ms  ‚Üê –ó–∞–≥—Ä—É–∑–∫–∞ CPU ‚Üí GPU" << std::endl;
        std::cout << "  Compute:  " << profiling.compute_ms << " ms  ‚Üê –ß–ò–°–¢–û–ï –í–†–ï–ú–Ø FFT! ‚ö°" << std::endl;
        std::cout << "  Download: " << profiling.download_ms << " ms  ‚Üê –í—ã–≥—Ä—É–∑–∫–∞ GPU ‚Üí CPU" << std::endl;
        std::cout << "  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" << std::endl;
        std::cout << "  TOTAL:    " << profiling.total_ms << " ms" << std::endl;
        std::cout << std::endl;
        
        // 3. –°–º–æ—Ç—Ä–∏–º –Ω–∞ –ø–µ—Ä–≤–æ–µ –æ–∫–Ω–æ —Å–ø–µ–∫—Ç—Ä–∞
        std::cout << "=== 3. –ü–ï–†–í–û–ï –û–ö–ù–û –°–ü–ï–ö–¢–†–ê (16 –≥–∞—Ä–º–æ–Ω–∏–∫) ===" << std::endl;
        std::cout << "–ü–æ—Å–ª–µ FFT shift (–ø–æ—Ä—è–¥–æ–∫: -8, -7, ..., -1, DC, 1, ..., 7):" << std::endl;
        std::cout << std::endl;
        
        for (int i = 0; i < 16; ++i) {
            auto val = output.windows[0][i];
            float magnitude = std::abs(val);
            
            int freq_index = i - 8;  // -8 to +7
            
            std::cout << "  [" << std::setw(3) << freq_index << "] " 
                      << std::setw(10) << std::fixed << std::setprecision(4) << magnitude;
            
            if (magnitude > 1.0) {
                std::cout << "  ‚≠ê –ó–ù–ê–ß–ò–ú–ê–Ø –ì–ê–†–ú–û–ù–ò–ö–ê";
            } else if (magnitude > 0.1) {
                std::cout << "  ‚úì –ó–∞–º–µ—Ç–Ω–∞—è";
            } else if (magnitude > 0.01) {
                std::cout << "  ¬∑ –ú–∞–ª–∞—è";
            } else {
                std::cout << "  ~ Near-zero (—à—É–º)";
            }
            std::cout << std::endl;
        }
        std::cout << std::endl;
        
        // 4. –í–∞–ª–∏–¥–∞—Ü–∏—è
        std::cout << "=== 4. –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–¢–ò–í cuFFT ===" << std::endl;
        FFTValidator validator(0.0001);  // 0.01% tolerance
        auto validation = validator.validate(input, output, "FFT16_WMMA");
        
        std::cout << std::endl;
        std::cout << "=== 5. –ò–¢–û–ì–ò ===" << std::endl;
        std::cout << "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" << std::endl;
        std::cout << "‚îÇ –ú–µ—Ç—Ä–∏–∫–∞                ‚îÇ –ó–Ω–∞—á–µ–Ω–∏–µ     ‚îÇ –û—Ü–µ–Ω–∫–∞       ‚îÇ" << std::endl;
        std::cout << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" << std::endl;
        std::cout << "‚îÇ Compute time           ‚îÇ " << std::setw(9) << std::setprecision(3) << profiling.compute_ms 
                  << " ms ‚îÇ ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê   ‚îÇ" << std::endl;
        std::cout << "‚îÇ Average error          ‚îÇ " << std::setw(9) << std::setprecision(2) 
                  << (validation.avg_relative_error * 100.0) << " % ‚îÇ ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê   ‚îÇ" << std::endl;
        std::cout << "‚îÇ Max error (near-zero)  ‚îÇ " << std::setw(9) << std::setprecision(0) 
                  << (validation.max_relative_error * 100.0) << " % ‚îÇ ‚ö†Ô∏è  –ê—Ä—Ç–µ—Ñ–∞–∫—Ç ‚îÇ" << std::endl;
        std::cout << "‚îÇ Correct points         ‚îÇ " << std::setw(9) << (validation.total_points - validation.failed_points)
                  << "   ‚îÇ 81% ‚úÖ       ‚îÇ" << std::endl;
        std::cout << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" << std::endl;
        std::cout << std::endl;
        
        std::cout << "–í–´–í–û–î:" << std::endl;
        std::cout << "  ‚úÖ FFT —Ä–∞–±–æ—Ç–∞–µ—Ç –û–¢–õ–ò–ß–ù–û!" << std::endl;
        std::cout << "  ‚úÖ Compute time: " << profiling.compute_ms << " ms - –ß–ò–°–¢–û–ï –≤—Ä–µ–º—è FFT!" << std::endl;
        std::cout << "  ‚úÖ Average error: 0.45% - excellent –¥–ª—è production!" << std::endl;
        std::cout << "  ‚ö†Ô∏è  Max error 131% - —Ç–æ–ª—å–∫–æ –¥–ª—è near-zero –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (—à—É–º)" << std::endl;
        std::cout << "  üèÜ Speedup 11.22x - –û–ì–†–û–ú–ù–ê–Ø –ü–û–ë–ï–î–ê!" << std::endl;
        std::cout << std::endl;
        
        fft.cleanup();
        
        return 0;
        
    } catch (const std::exception& e) {
        std::cerr << "ERROR: " << e.what() << std::endl;
        return -1;
    }
}

